Assignment 3: 100 points
This assignment covers module 3 and module 4 topics. To write the programs
below you will need to demonstrate an understanding of the following topics:
• Arrays (Module 3)
• Variable (Module 1)
• Simple Data Types (Module 1)
• Expressions (Module 2)
• Loops (Module 2)
Please refer back to the module lectures if you find you have any gaps in your
understanding for these topics.
Notes:
You may find the following useful https://developer.mozilla.org/enUS/docs/Web/JavaScript/Reference/Global_Objects/String/charAt.
Introduction
In order to master the arrays claw technique and defeat the mighty Eagle
Warrior, complete the following:
1. Num To Word
Write a program called num_to_word.js, that takes an integer and extracts and
displays each digit of the integer in English. So, if the input is 123, the program
should display
one two three
Use 932 as your input value.
2. Sum Number
Write a program called sum_number.js, that calculates the sum of the numbers
contained in a string and displays the result. Use a string containing “2155” as
your input value. For example, given the input , let num = “22”, I would sum 2 + 2
for a result of 4.
The power is the amps at a given hour times the voltage at the same hour.
Calculate the average power consumed for the day and display it at the end. i.e
3. Average Power
Write a program called average_power.js. We will simulate taking current and
voltage readings from a circuit and calculating the average power of the circuit.
The program should create an array called volts and populate it with 24 random
numbers between 5 and 20. Next create an array called amps and populate it
with 24 random numbers between 1 and 10. These are your current readings for
every hour for a given day. Compute the average power for each day and display
it in a tabular format i.e
Hour Current Voltage Power
1 2 15 30
2 5 20 100
.
.
.
24 1 5 5
Average Power: 45 watts
4. Prime numbers can be generated by an algorithm known as the Sieve of
Eratosthenes. The algorithm for this procedure is presented here. Write a
program called primes.js that implements this algorithm. Have the program find
and display all the prime numbers up to n = 150.
Sieve of Eratosthenes Algorithm
To Display All Prime Numbers Between 1 and n
Step 1: We need to start with all the numbers representing the range of
numbers that are possible candidate primes. So, create an array of consecutive
integers from 2 to n: (2,3,4,..n). I wouldn’t hand-code this. I would use a loop to
populate the array.
Step 2: At each step we select the smallest number and remove all it’s multiples.
So we’ll start with an outer loop that goes from 2 to n. initially, let p equal 2, the
first prime number.
Step 3: In an inner loop we need to iterate over all the numbers that are multiples
of p, i.e for 2, that’s 2,4,6,8 etc. Each time, setting it’s value to false in the original
array.
Step 4: Find the first number greater than p in the list that is not marked False. If
there was no such number, stop. Otherwise, let p now equal this number( which
is the next prime), and repeat from step 3.
When the algorithm terminates, all the numbers in the list that are not marked
False are prime.
Example:
Let us take an example when n = 50. So we need to print all print numbers smaller
than or equal to 50.
We create a list of all numbers from 2 to 50.
According to the algorithm we will mark all the numbers which are divisible by 2.
Now we move to our next unmarked number 3 and mark all the numbers which
are multiples of 3.
We move to our next unmarked number 5 and mark all multiples of 5.
We continue this process and our final table will look like below:
So the prime numbers are the unmarked ones: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
31, 37, 41, 43, 47.